from odoo import models, fields, api, _
from datetime import datetime,date
import requests


class CrmLead(models.Model):
    _inherit = 'crm.lead'    

    x_simpro_id = fields.Char('Simpro Id')
    site_id = fields.Many2one('res.partner', 'Site', domain=[('is_sites', '!=', False)])
    plc_site_id = fields.Many2one('plc.sites', 'Site', domain="[('customer_id', '=', partner_id)]")
    note = fields.Html('Notes')
    follow_up_date  = fields.Date(string="Follow Up Date")
    lead_creat_date  = fields.Date(string="Creation Date", required=True,default=datetime.now())
    generated_by = fields.Many2one('res.users','Lead Generated By')
    project_type_id = fields.Many2one('think.project.type','Lead Project Type')
    
    def get_attachments(self, simpro_lead_id, headers, odoo_lead_id):
        company_url = self.env['ir.config_parameter'].sudo().get_param('ehcs_simpro_integration.company_url')
        company_id = self.env['ir.config_parameter'].sudo().get_param('ehcs_simpro_integration.company') or 0
        attachemenrt_url = f'{company_url}api/v1.0/companies/{company_id}/leads/{simpro_lead_id}/attachments/files/'

        try:
            response = requests.get(attachemenrt_url, headers=headers)
            if response.status_code != 200:
                raise Exception(f"Failed to get bom: {response.text}")
            attachments = response.json()
        except Exception as e:
            raise Exception(f"Attachments Fetch Error: {str(e)}")
        for attachment in attachments:
            attachment_id = attachment.get('ID')
            file_name = attachment.get('Filename')
            attachemenrt__ids = f'{company_url}api/v1.0/companies/{company_id}/leads/{simpro_lead_id}/attachments/files/{attachment_id}?display=Base64'
            response = requests.get(attachemenrt__ids, headers=headers)
            if response.status_code != 200:
                print(f"Failed to download: {file_name}")
                continue

            result_json = response.json()
            base64_data = result_json.get('Base64Data')
    
            if not base64_data:
                print(f"No Base64Data for: {file_name}")
                continue

            print('\n\n result_json',result_json)
            new_attachment = self.env['ir.attachment'].create({
                'name': file_name,
                'type': 'binary',
                'datas': base64_data,
                'res_model': 'crm.lead',
                'res_id': odoo_lead_id,
                'mimetype': result_json.get('MimeType'),
            })

    def _cron_get_simpro_leads(self):
        company_url = self.env['ir.config_parameter'].sudo().get_param('ehcs_simpro_integration.company_url')
        company_id = self.env['ir.config_parameter'].sudo().get_param('ehcs_simpro_integration.company') or 0
        access_token = self.env['ir.config_parameter'].sudo().get_param('ehcs_simpro_integration.access_token')
        page_size = self.env['ir.config_parameter'].sudo().get_param('ehcs_simpro_integration.page_size')
        page = self.env['ir.config_parameter'].sudo().get_param('ehcs_simpro_integration.page')

        # === STEP 1: Use the provided token directly ===
        # access_token = '37a421022e74dd11d9cfc1f000f9c6d88f8d8c2b'
        if not access_token:
            raise ValidationError("Please Enter Access Token \nSetting > Simpro Integration")

        if not company_url:
            raise ValidationError("Please Set Your Company Simpro Url\n setting > Simpro Integration")

        # === STEP 2: Call Simpro API ===
        all_lead_url = f'{company_url}api/v1.0/companies/{company_id}/leads/'

        headers = {
            'Authorization': f'Bearer {access_token}',
            'Accept': 'application/json',
        }

        params = {
            "pageSize": page_size,
            "page": page
            }

        #connect api and get data
        try:
            response = requests.get(all_lead_url, headers=headers, timeout=30, params=params)
            if response.status_code != 200:
                raise Exception(f"Failed to get products: {response.text}")
            leads = response.json()
        except Exception as e:
            raise Exception(f"Catalog Fetch Error: {str(e)}")

        User = self.env['res.users']
        Lead = self.env['crm.lead']
        ProjectType = self.env['think.project.type']
        Customers = self.env['res.partner'].search([('is_customer','!=',False)])
        Sites = self.env['plc.sites']

        #create lead
        for lead in leads:
            lead_id = lead.get('ID')
            specific_lead_url = f'{company_url}api/v1.0/companies/{company_id}/leads/{lead_id}'
            detail_res = requests.get(specific_lead_url, headers=headers)
            if detail_res.status_code != 200:
                print(f"Failed to fetch lead")
                continue

            data = detail_res.json()
            print("\n data",data)
            existing = Lead.search([('x_simpro_id','=', data.get('ID'))], limit=1)
            if existing:
                print('\n Lead already create',existing)
                continue
            
            Customer = data.get('Customer')
            Cite = data.get('Site')
            customer_id = False
            site_id = False

            if Customer.get('ID'):
                customer_id = Customers.search([('x_simpro_contact_id','=', Customer.get('ID')), ('name','=', Customer.get('CompanyName'))], limit=1).id
            if Cite.get('ID'):
                site_id = Sites.search([('x_simpro_site_id','=', Cite.get('ID')), ('name','=', Cite.get('Name'))], limit=1).id

            #customefields
            lead_project_type_url = f'{company_url}api/v1.0/companies/{company_id}/leads/{lead_id}/customFields/{75}'
            lead_generated_url = f'{company_url}api/v1.0/companies/{company_id}/leads/{lead_id}/customFields/{76}'
            
            proj_detail_res = requests.get(lead_project_type_url, headers=headers)
            generated_detail_res = requests.get(lead_generated_url, headers=headers)
            p_t = False
            p_u = False
            if proj_detail_res.status_code != 200:
                print(f"Failed to Project Type")
            else:
                proj_data = proj_detail_res.json()
                input_value = proj_data.get('Value')
                if input_value:
                    p_t = ProjectType.search([('name','=',input_value)], limit=1).id
                    if not p_t:
                        new_pt = ProjectType.create({
                            'name' : input_value
                            })
                        p_t = new_pt.id

            if generated_detail_res.status_code != 200:
                print(f"Failed to Lead Generated By")
            else:
                generated_by_data = generated_detail_res.json()
                Project_Owner = generated_by_data.get(generated_by_data.get('Value'))
                if Project_Owner:
                    p_u = User.search([('name','=',Project_Owner)], limit=1).id

            value = {
                'x_simpro_id' : data.get('ID'),
                'name' : data.get('LeadName'),
                'partner_id' : customer_id,
                'plc_site_id' : site_id,
                'note' : data.get('Notes'),
                'description' : data.get('Description'),
                'follow_up_date' : data.get('FollowUpDate'),
                'lead_creat_date' : data.get('DateCreated'),
                'project_type_id' : p_t,
                'user_id' : p_u,
                }

            new_lead = Lead.create(value)
            
            print("\n New Lead Created", new_lead)
            self.get_attachments(data.get('ID'),headers,new_lead.id)

